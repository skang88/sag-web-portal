✔ Project name: … frontend
✔ Add TypeScript? … No / Yes  (Yes를 추천하지만, 익숙하지 않다면 No)
✔ Add JSX Support? … No
✔ Add Vue Router for Single Page Application development? … Yes (웹 포털이므로 Yes 추천)
✔ Add Pinia for state management? … Yes (상태 관리가 필요하면 Yes 추천)
✔ Add Vitest for Unit Testing? … No / Yes (필요에 따라 선택)
✔ Add an End-to-End Testing Solution? › No
✔ Add ESLint for code quality? … Yes (코드 품질 관리를 위해 Yes 추천)
✔ Add Prettier for code formatting? … Yes (코드 포맷팅을 위해 Yes 추천)

Scaffolding project in ./frontend...
Done.

Done. Now run:

   cd frontend
   npm install
   npm run format
   npm run dev

| Optional: Initialize Git in your project directory with:

   git init && git add -A && git commit -m "initial commit"


   # 1. backend 폴더 생성 및 이동
mkdir backend
cd backend

# 2. 파이썬 가상 환경 생성 (venv라는 이름의 폴더가 생깁니다)
python -m venv venv

# 3. 가상 환경 활성화
#    - macOS/Linux:
source venv/bin/activate
#    - Windows:
#    .\venv\Scripts\activate

# (터미널 프롬프트 앞에 (venv)가 표시되면 성공입니다)

# 4. Flask 설치 (가상 환경이 활성화된 상태에서)
pip install Flask Flask-Cors python-dotenv

# Flask-Cors: Vue와 연동 시 CORS 오류를 쉽게 해결하기 위해 미리 설치
# python-dotenv: 환경 변수 관리를 위해 설치

# 5. 설치된 패키지 목록을 파일로 저장 (협업 및 배포에 필수)
pip freeze > requirements.txt
